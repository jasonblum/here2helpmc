# Generated by Django 3.0.8 on 2020-08-14 13:36

import address.models
import annoying.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0002_auto_20160213_1726'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('passphrase', models.CharField(help_text='A phrase which, with your address, uniquely identifies your household.', max_length=20, verbose_name='Passphrase')),
                ('phone', models.CharField(help_text='This should preferably be a mobile phone number that can receive text messages.', max_length=20, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Phone')),
                ('secondary_phone', models.CharField(blank=True, help_text='(301) 123-4567', max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Secondary Phone')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('secondary_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Secondary Email')),
                ('apartment_number', models.CharField(blank=True, max_length=10, null=True, verbose_name='Apartment Number')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('am', 'Amharic')], default='en', max_length=2, verbose_name='Preferred Language')),
                ('household_size', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default=2, help_text='How many household members are you feeding?', verbose_name='Household size')),
                ('special_requests', models.TextField(blank=True, help_text='A limited amount of feminine hygiene and other non-food items are available upon request, on a first-come, first-served basis. Let us know if you need anything like this and please specify.', null=True, verbose_name='Special Requests')),
                ('dietary_restrictions', models.CharField(blank=True, help_text='Vegetarian?  Gluten-free?  Is there anything you have no use for?', max_length=254, null=True, verbose_name='Dietary restrictions / Allergies')),
                ('comments', models.TextField(blank=True, help_text='Delivery instructions or anything else we can help with?', null=True, verbose_name='Comments')),
                ('address', address.models.AddressField(on_delete=django.db.models.deletion.CASCADE, to='address.Address', verbose_name='Street Address')),
            ],
            options={
                'ordering': ['-dt_created'],
            },
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('dt_delivered', models.DateTimeField(blank=True, null=True, verbose_name='Datetime delivered')),
                ('notes', models.TextField(blank=True, help_text='Trip Notes (in addition to order comments.', null=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name_plural': 'Deliveries',
                'ordering': ['-dt_delivered'],
            },
        ),
        migrations.CreateModel(
            name='DropoffLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('neighborhood', models.CharField(max_length=254, unique=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('dropoff_instructions', models.TextField(blank=True, null=True)),
                ('address', address.models.AddressField(on_delete=django.db.models.deletion.CASCADE, to='address.Address')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('qty_milk', models.PositiveSmallIntegerField(default=0, verbose_name='Milk (32 oz)')),
                ('qty_cereal', models.PositiveSmallIntegerField(default=0, verbose_name='Boxes of Cold Cereal')),
                ('qty_oatmeal', models.PositiveSmallIntegerField(default=0, verbose_name='Oatmeal')),
                ('qty_granola_bars', models.PositiveSmallIntegerField(default=0, verbose_name='Granola Breakfast Bars (individual)')),
                ('qty_peanutbutter', models.PositiveSmallIntegerField(default=0, verbose_name='Peanut Butter')),
                ('qty_jelly', models.PositiveSmallIntegerField(default=0, verbose_name='Jelly')),
                ('qty_soup', models.PositiveSmallIntegerField(default=0, verbose_name='Soup (2+ servings)')),
                ('qty_rice', models.PositiveSmallIntegerField(default=0, verbose_name='Rice (1lb dry)')),
                ('qty_pasta', models.PositiveSmallIntegerField(default=0, verbose_name='Pasta (1lb dry)')),
                ('qty_pastasauce', models.PositiveSmallIntegerField(default=0, verbose_name='Pasta Sauce')),
                ('qty_canned_tomatos', models.PositiveSmallIntegerField(default=0, verbose_name='Canned Tomatos')),
                ('qty_canned_beans', models.PositiveSmallIntegerField(default=0, verbose_name='Canned Beans')),
                ('qty_beans', models.PositiveSmallIntegerField(default=0, verbose_name='Beans (1lb dry)')),
                ('qty_canned_vegetables', models.PositiveSmallIntegerField(default=0, verbose_name='Canned Vegetables')),
                ('qty_canned_fruit', models.PositiveSmallIntegerField(default=0, verbose_name='Canned Fruit')),
                ('qty_applesauce', models.PositiveSmallIntegerField(default=0, verbose_name='Applesauce')),
                ('qty_canned_chickenfish_small', models.PositiveSmallIntegerField(default=0, verbose_name='Canned Chicken/Fish (Small)')),
                ('qty_canned_chickenfish_large', models.PositiveSmallIntegerField(default=0, verbose_name='Canned Chicken/Fish (Large)')),
                ('qty_mayonnaise', models.PositiveSmallIntegerField(default=0, verbose_name='Mayonnaise')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'ordering': ['-dt_updated'],
            },
        ),
        migrations.CreateModel(
            name='Supporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('first_name', models.CharField(max_length=254)),
                ('last_name', models.CharField(max_length=254)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, help_text='(301) 123-4567', max_length=20, null=True, validators=[django.core.validators.MinLengthValidator(10)])),
                ('is_driver', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('address', address.models.AddressField(on_delete=django.db.models.deletion.CASCADE, to='address.Address')),
            ],
            options={
                'unique_together': {('first_name', 'last_name', 'email')},
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('mcps_school_id', models.PositiveSmallIntegerField(unique=True)),
                ('school_type', models.CharField(choices=[('elementary', 'Elementary'), ('middle', 'Middle'), ('high', 'High')], max_length=10)),
                ('name', models.CharField(max_length=50)),
                ('raw_address', models.CharField(help_text='Raw address not yet validated by Google API.', max_length=254)),
                ('phone', models.CharField(help_text='(301) 123-4567', max_length=20, validators=[django.core.validators.MinLengthValidator(10)])),
                ('address', address.models.AddressField(on_delete=django.db.models.deletion.CASCADE, to='address.Address')),
            ],
            options={
                'unique_together': {('name', 'school_type')},
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('status', models.CharField(choices=[('created', 'Created'), ('ready', 'Ready'), ('delivered', 'Delivered')], default='created', max_length=9)),
                ('dt_ready', models.DateTimeField(blank=True, null=True, verbose_name='Datetime ready')),
                ('dt_delivered', models.DateTimeField(blank=True, null=True, verbose_name='Datetime delivered')),
                ('dt_cancelled', models.DateTimeField(blank=True, null=True, verbose_name='Datetime cancelled')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='orders.Customer')),
                ('deliver_to_address', address.models.AddressField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='address.Address', verbose_name='Street Address Delivered')),
                ('delivery', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='orders.Delivery')),
                ('dropoff_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='orders.DropoffLocation')),
            ],
            options={
                'ordering': ['-dt_created'],
            },
        ),
        migrations.AddField(
            model_name='dropofflocation',
            name='inventory',
            field=annoying.fields.AutoOneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='dropoff_location', to='orders.Inventory'),
        ),
        migrations.AddField(
            model_name='dropofflocation',
            name='lead_supporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='orders.Supporter'),
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True)),
                ('dt_updated', models.DateTimeField(auto_now=True, verbose_name='Datetime updated')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=6)),
                ('method', models.CharField(choices=[('cash', 'Cash'), ('check', 'Check'), ('credit', 'Credit'), ('venmo', 'Venmo')], max_length=6)),
                ('ok_to_publicly_recognize', models.BooleanField(default=False)),
                ('preferred_wording_for_public_recognition', models.TextField(blank=True, null=True)),
                ('other_donor_specifications', models.TextField(blank=True, null=True)),
                ('dt_thanked', models.DateTimeField(blank=True, null=True, verbose_name='Datetime thanked')),
                ('supporter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='orders.Supporter')),
            ],
            options={
                'ordering': ['-amount'],
            },
        ),
        migrations.AddField(
            model_name='delivery',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deliveries', to='orders.Supporter'),
        ),
        migrations.AddField(
            model_name='delivery',
            name='dropoff_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='orders.DropoffLocation'),
        ),
        migrations.AddField(
            model_name='customer',
            name='schools',
            field=models.ManyToManyField(blank=True, help_text='Does someone in your family attend MCPS? If so, which schools?', related_name='customers', to='orders.School', verbose_name='Schools'),
        ),
        migrations.AlterUniqueTogether(
            name='customer',
            unique_together={('passphrase', 'address')},
        ),
    ]
